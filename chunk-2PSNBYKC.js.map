{
  "version": 3,
  "sources": ["src/app/components/pdf-generator/pdf-generator.component.ts", "src/app/components/checkout/checkout.component.ts", "src/app/components/checkout/checkout.component.html"],
  "sourcesContent": ["import { Component, Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { AuthService } from '../../services/auth.service';\r\nimport { ToastService } from '../../services/toast.service';\r\nimport { environment } from '../../../environments/environment';\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\n@Component({\r\n    selector: 'app-pdf-generator',\r\n    standalone: true,\r\n    imports: [],\r\n    template: '', // No template needed as this is a service component\r\n    styleUrls: ['./pdf-generator.component.scss']\r\n})\r\nexport class PdfGeneratorComponent {\r\n    private logoUrl = `${environment.assetsBase.replace(/\\/$/, '')}/no-image-icon.jpg`;\r\n    private user: any = null;\r\n    private templateCache: string | null = null;\r\n\r\n    constructor(\r\n        private auth: AuthService,\r\n        private toast: ToastService,\r\n        private http: HttpClient\r\n    ) {\r\n        // Set up logo URL from user data\r\n        this.auth.user$.subscribe(u => {\r\n            this.user = u;\r\n            const logoVal = u?.logo || u?.fav_icon || u?.logo_url || null;\r\n            if (logoVal) {\r\n                this.logoUrl = /^https?:\\/\\//i.test(logoVal) ? logoVal : `${environment.assetsBase.replace(/\\/$/, '')}/${logoVal.replace(/^\\//, '')}`;\r\n            }\r\n        });\r\n    }\r\n\r\n    async generateInvoicePdf(invoiceData: InvoiceData): Promise<void> {\r\n        try {\r\n            // Validate required data\r\n            if (!invoiceData.customer) {\r\n                this.toast.show('Customer information is required', 'error');\r\n                return;\r\n            }\r\n\r\n            if (!invoiceData.staff) {\r\n                this.toast.show('Staff information is required', 'error');\r\n                return;\r\n            }\r\n\r\n            if (!invoiceData.items || invoiceData.items.length === 0) {\r\n                this.toast.show('Cannot generate PDF for empty cart', 'error');\r\n                return;\r\n            }\r\n\r\n            if (!invoiceData.payments || invoiceData.payments.length === 0) {\r\n                this.toast.show('Payment information is required', 'error');\r\n                return;\r\n            }\r\n\r\n            // Convert logo to base64\r\n            const logoBase64 = this.logoUrl ? await this.convertImageToBase64(this.logoUrl) : '';\r\n\r\n            // Open print window\r\n            const printWindow = window.open('', '_blank');\r\n            if (!printWindow) {\r\n                this.toast.show('Unable to open print window. Please check popup settings.', 'error');\r\n                return;\r\n            }\r\n\r\n            // Generate HTML and display\r\n            const html = await this.buildInvoiceHtml(invoiceData, logoBase64);\r\n            printWindow.document.write(html);\r\n            printWindow.document.close();\r\n\r\n            // Wait for content to load then print\r\n            printWindow.onload = function () {\r\n                printWindow.focus();\r\n                printWindow.print();\r\n            };\r\n\r\n            // Show success message\r\n            this.toast.show('PDF generated successfully', 'success');\r\n\r\n        } catch (error) {\r\n            console.error('Error generating PDF:', error);\r\n            this.toast.show('Error generating PDF', 'error');\r\n        }\r\n    }\r\n\r\n    private convertImageToBase64(url: string): Promise<string> {\r\n        return new Promise((resolve, reject) => {\r\n            if (!url) {\r\n                resolve('');\r\n                return;\r\n            }\r\n\r\n            const canvas = document.createElement('canvas');\r\n            const ctx = canvas.getContext('2d');\r\n            const img = new Image();\r\n\r\n            img.crossOrigin = 'anonymous';\r\n            img.onload = () => {\r\n                canvas.width = img.width;\r\n                canvas.height = img.height;\r\n                ctx?.drawImage(img, 0, 0);\r\n                try {\r\n                    const dataURL = canvas.toDataURL('image/png');\r\n                    resolve(dataURL);\r\n                } catch (error) {\r\n                    console.error('Error converting image to base64:', error);\r\n                    resolve('');\r\n                }\r\n            };\r\n            img.onerror = () => {\r\n                console.error('Error loading image:', url);\r\n                resolve('');\r\n            };\r\n            img.src = url;\r\n        });\r\n    }\r\n\r\n    private async loadTemplate(): Promise<string> {\r\n        if (this.templateCache) {\r\n            return this.templateCache;\r\n        }\r\n\r\n        try {\r\n            // Load the HTML template from the file\r\n            const templatePath = './assets/templates/invoice-template.html';\r\n            this.templateCache = await this.http.get(templatePath, { responseType: 'text' }).toPromise() || '';\r\n            return this.templateCache;\r\n        } catch (error) {\r\n            console.error('Error loading template:', error);\r\n            // Fallback to inline template if file loading fails\r\n            return this.getInlineTemplate();\r\n        }\r\n    }\r\n\r\n    private getInlineTemplate(): string {\r\n        // Fallback inline template in case file loading fails\r\n        return `\r\n<!DOCTYPE html>\r\n<html>\r\n<head>\r\n  <title>Invoice - {{customerName}}</title>\r\n  <style>\r\n    * { box-sizing: border-box; }\r\n    body { \r\n      font-family: 'Arial', 'Helvetica', sans-serif; \r\n      padding: 0; margin: 0; color: #333; \r\n      background: white; line-height: 1.4;\r\n    }\r\n    .invoice-container { max-width: 800px; margin: 20px auto; background: white; border: 1px solid #ddd; }\r\n    .header { background: #f8f9fa; border-bottom: 2px solid #333; padding: 30px; }\r\n    .header-content { display: flex; align-items: center; gap: 25px; }\r\n    .logo-container { width: 80px; height: 80px; border: 1px solid #ddd; display: flex; align-items: center; justify-content: center; overflow: hidden; }\r\n    .logo { width: 70px; height: 70px; object-fit: cover; }\r\n    .logo-fallback { width: 60px; height: 60px; background: #333; color: white; display: flex; align-items: center; justify-content: center; font-size: 20px; font-weight: bold; }\r\n    .shop-info { flex: 1; }\r\n    .shop-name { font-size: 24px; font-weight: 700; margin: 0 0 10px 0; color: #333; }\r\n    .shop-details { font-size: 14px; margin: 5px 0; color: #666; }\r\n    .shop-details strong { margin-right: 8px; color: #333; }\r\n    .invoice-meta { position: absolute; top: 30px; right: 30px; text-align: right; }\r\n    .invoice-title { font-size: 16px; font-weight: 600; color: #333; margin: 0; }\r\n    .invoice-number { font-size: 20px; font-weight: 700; margin: 5px 0; color: #333; }\r\n    .content { padding: 30px; }\r\n    .customer-staff-row { display: grid; grid-template-columns: 1fr 1fr; gap: 30px; margin-bottom: 30px; }\r\n    .info-card { border: 1px solid #ddd; padding: 20px; background: #f8f9fa; }\r\n    .info-card h3 { margin: 0 0 15px 0; font-size: 16px; font-weight: 600; color: #333; border-bottom: 1px solid #ddd; padding-bottom: 8px; }\r\n    .info-card .detail { font-size: 14px; margin: 8px 0; display: flex; justify-content: space-between; }\r\n    .info-card .detail .label { font-weight: 600; color: #333; }\r\n    .products-table, .payment-table { width: 100%; border-collapse: collapse; margin: 20px 0; border: 1px solid #ddd; }\r\n    .products-table th, .payment-table th { background: #333; color: white; padding: 15px 12px; font-weight: 600; text-align: left; font-size: 13px; text-transform: uppercase; letter-spacing: 0.5px; }\r\n    .products-table td, .payment-table td { padding: 12px; border-bottom: 1px solid #e0e0e0; font-size: 14px; }\r\n    .products-table tbody tr:nth-child(even), .payment-table tbody tr:nth-child(even) { background: #f8f9fa; }\r\n    .total-row { background: #333 !important; color: white !important; font-weight: 700; font-size: 16px; }\r\n    .total-row td { padding: 18px 12px !important; border: none !important; }\r\n    .payment-section { margin-top: 30px; }\r\n    .section-title { font-size: 18px; font-weight: 700; color: #333; margin: 0 0 15px 0; padding-bottom: 8px; border-bottom: 2px solid #333; }\r\n    .footer { background: #f8f9fa; border-top: 2px solid #333; text-align: center; padding: 25px; margin-top: 30px; }\r\n    .footer h4 { margin: 0 0 10px 0; font-size: 16px; font-weight: 600; color: #333; }\r\n    .footer p { margin: 5px 0; color: #666; font-size: 14px; }\r\n    .right { text-align: right; }\r\n    .center { text-align: center; }\r\n    .currency { font-weight: 600; color: #333; }\r\n    @media print { body { background: white; padding: 0; } .invoice-container { border: none; margin: 0; max-width: none; } }\r\n    @media (max-width: 768px) { .customer-staff-row { grid-template-columns: 1fr; gap: 20px; } .header-content { flex-direction: column; text-align: center; } .invoice-meta { position: static; margin-top: 20px; } }\r\n  </style>\r\n</head>\r\n<body>\r\n  <div class=\"invoice-container\">\r\n    <div class=\"header\">\r\n      <div class=\"header-content\">\r\n        <div class=\"logo-container\">{{logoHtml}}</div>\r\n        <div class=\"shop-info\">\r\n          <h1 class=\"shop-name\">{{shopName}}</h1>\r\n          {{shopPhoneHtml}}{{shopAddressHtml}}{{shopGstHtml}}\r\n        </div>\r\n      </div>\r\n      <div class=\"invoice-meta\">\r\n        <div class=\"invoice-title\">INVOICE</div>\r\n        <div class=\"invoice-number\">{{invoiceNumber}}</div>\r\n        <div style=\"font-size: 12px; margin-top: 8px; color: #666;\">{{currentDate}} • {{currentTime}}</div>\r\n      </div>\r\n    </div>\r\n    <div class=\"content\">\r\n      <div class=\"customer-staff-row\">\r\n        <div class=\"info-card\">\r\n          <h3>Customer Information</h3>\r\n          <div class=\"detail\"><span class=\"label\">Name:</span><span>{{customerName}}</span></div>\r\n          {{customerPhoneHtml}}\r\n        </div>\r\n        <div class=\"info-card\">\r\n          <h3>Staff Information</h3>\r\n          <div class=\"detail\"><span class=\"label\">Served by:</span><span>{{staffName}}</span></div>\r\n          <div class=\"detail\"><span class=\"label\">Date:</span><span>{{currentDate}}</span></div>\r\n        </div>\r\n      </div>\r\n      <h2 class=\"section-title\">Products</h2>\r\n      <table class=\"products-table\">\r\n        <thead><tr><th>Product</th><th style=\"text-align: center\">Qty</th><th style=\"text-align: right\">Price</th><th style=\"text-align: right\">Total</th></tr></thead>\r\n        <tbody>{{itemsHtml}}</tbody>\r\n        <tfoot><tr class=\"total-row\"><td colspan=\"3\" class=\"right\"><strong>TOTAL AMOUNT</strong></td><td class=\"right\"><strong>₹{{totalAmount}}</strong></td></tr></tfoot>\r\n      </table>\r\n      <div class=\"payment-section\">\r\n        <h2 class=\"section-title\">Payment Details</h2>\r\n        <table class=\"payment-table\">\r\n          <thead><tr><th>Payment Method</th><th style=\"text-align: right\">Amount</th><th>Details</th></tr></thead>\r\n          <tbody>{{paymentsHtml}}</tbody>\r\n        </table>\r\n      </div>\r\n    </div>\r\n    <div class=\"footer\">\r\n      <h4>Thank you for your business!</h4>\r\n      <p>We appreciate your trust and look forward to serving you again.</p>\r\n      <p style=\"margin-top: 15px; font-size: 12px;\">Generated on {{currentDate}} at {{currentTime}}</p>\r\n    </div>\r\n  </div>\r\n</body>\r\n</html>`;\r\n    }\r\n\r\n    private async buildInvoiceHtml(invoiceData: InvoiceData, logoBase64: string = ''): Promise<string> {\r\n        // Load the HTML template\r\n        let template = await this.loadTemplate();\r\n\r\n        // Prepare data for template replacement\r\n        const itemsHtml = invoiceData.items.map(i => `\r\n            <tr>\r\n                <td>${i.product?.name || i.product?.title || i.id}</td>\r\n                <td style=\"text-align: center\">${i.qty}</td>\r\n                <td style=\"text-align: right\">₹${Number(i.product?.price || 0).toFixed(2)}</td>\r\n                <td style=\"text-align: right\">₹${(Number(i.product?.price || 0) * i.qty).toFixed(2)}</td>\r\n            </tr>\r\n        `).join('');\r\n\r\n        const staffName = invoiceData.staff?.name || invoiceData.staff?.full_name || '-';\r\n        const customerName = invoiceData.customer?.name || 'Walk-in Customer';\r\n        const customerPhone = invoiceData.customer?.phone || '';\r\n\r\n        // Shop information from user data\r\n        const shopName = this.user?.business_name || this.user?.name || 'Shop Name';\r\n        const shopPhone = this.user?.phone || this.user?.mobile || '';\r\n        const shopAddress = this.user?.user_detail?.address || this.user?.address || '';\r\n        const shopGst = this.user?.user_detail?.gst_number || this.user?.gst_number || '';\r\n\r\n        // Payment methods details\r\n        const paymentsHtml = invoiceData.payments.map(payment => {\r\n            const methodName = payment.method.name;\r\n            const amount = `₹${Number(payment.amount || 0).toFixed(2)}`;\r\n            let details = '';\r\n\r\n            if (payment.method.name.toLowerCase() === 'finance') {\r\n                details = `Ref: ${payment.financeRefNo || 'N/A'}, Finance: ${payment.selectedFinance?.name || 'N/A'}`;\r\n            } else if (payment.method.name.toLowerCase() === 'card') {\r\n                details = `Card: ${payment.cardNo || 'N/A'}, Name: ${payment.cardName || 'N/A'}`;\r\n            } else if (payment.method.name.toLowerCase() === 'cheque') {\r\n                details = `Cheque No: ${payment.chequeNo || 'N/A'}`;\r\n            }\r\n\r\n            return `\r\n                <tr>\r\n                    <td>${methodName}</td>\r\n                    <td style=\"text-align: right\">${amount}</td>\r\n                    <td>${details}</td>\r\n                </tr>\r\n            `;\r\n        }).join('');\r\n\r\n        const currentDate = new Date().toLocaleDateString();\r\n        const currentTime = new Date().toLocaleTimeString();\r\n\r\n        // Prepare conditional HTML snippets\r\n        const logoHtml = logoBase64 ?\r\n            `<img src=\"${logoBase64}\" alt=\"${shopName}\" class=\"logo\">` :\r\n            `<div class=\"logo-fallback\">${shopName.charAt(0)}</div>`;\r\n\r\n        const shopPhoneHtml = shopPhone ? `<div class=\"shop-details\"><strong>Phone:</strong> ${shopPhone}</div>` : '';\r\n        const shopAddressHtml = shopAddress ? `<div class=\"shop-details\"><strong>Address:</strong> ${shopAddress}</div>` : '';\r\n        const shopGstHtml = shopGst ? `<div class=\"shop-details\"><strong>GST No:</strong> ${shopGst}</div>` : '';\r\n        const customerPhoneHtml = customerPhone ? `\r\n            <div class=\"detail\">\r\n                <span class=\"label\">Phone:</span>\r\n                <span>${customerPhone}</span>\r\n            </div>\r\n        ` : '';\r\n\r\n        // Replace template placeholders with actual data\r\n        const replacements = {\r\n            '{{customerName}}': customerName,\r\n            '{{staffName}}': staffName,\r\n            '{{shopName}}': shopName,\r\n            '{{logoHtml}}': logoHtml,\r\n            '{{shopPhoneHtml}}': shopPhoneHtml,\r\n            '{{shopAddressHtml}}': shopAddressHtml,\r\n            '{{shopGstHtml}}': shopGstHtml,\r\n            '{{customerPhoneHtml}}': customerPhoneHtml,\r\n            '{{invoiceNumber}}': `#INV-${Date.now().toString().slice(-6)}`,\r\n            '{{currentDate}}': currentDate,\r\n            '{{currentTime}}': currentTime,\r\n            '{{itemsHtml}}': itemsHtml,\r\n            '{{paymentsHtml}}': paymentsHtml,\r\n            '{{totalAmount}}': invoiceData.total.toFixed(2)\r\n        };\r\n\r\n        // Apply all replacements\r\n        Object.entries(replacements).forEach(([placeholder, value]) => {\r\n            template = template.replace(new RegExp(placeholder, 'g'), value);\r\n        });\r\n\r\n        return template;\r\n    }\r\n}\r\n\r\n// Interface for invoice data\r\nexport interface InvoiceData {\r\n    customer: any;\r\n    staff: any;\r\n    items: any[];\r\n    payments: any[];\r\n    total: number;\r\n}", "import { Component, OnInit } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { Router } from '@angular/router';\r\nimport { HttpClient, HttpClientModule } from '@angular/common/http';\r\nimport { CartService } from '../../services/cart.service';\r\nimport { AuthService } from '../../services/auth.service';\r\nimport { ToastService } from '../../services/toast.service';\r\nimport { PdfGeneratorComponent, InvoiceData } from '../pdf-generator/pdf-generator.component';\r\nimport { environment } from '../../../environments/environment';\r\n\r\n@Component({\r\n    selector: 'app-checkout',\r\n    standalone: true,\r\n    imports: [CommonModule, FormsModule, HttpClientModule],\r\n    templateUrl: './checkout.component.html',\r\n    styleUrls: ['./checkout.component.scss']\r\n})\r\nexport class CheckoutComponent implements OnInit {\r\n    items: any[] = [];\r\n    staffList: any[] = [];\r\n    customerList: any[] = [];\r\n    searchedCustomers: any[] = [];\r\n    selectedStaff: any = null;\r\n    selectedCustomer: any = null;\r\n    loading = false;\r\n    user: any = null;\r\n\r\n    // Customer search properties\r\n    customerSearchTerm: string = '';\r\n    customerSearchLoading: boolean = false;\r\n    showCustomerDropdown: boolean = false;\r\n    searchTimeout: any;\r\n\r\n    // Staff search properties\r\n    staffSearchTerm: string = '';\r\n    staffSearchLoading: boolean = false;\r\n    showStaffDropdown: boolean = false;\r\n    searchedStaff: any[] = [];\r\n    staffSearchTimeout: any;\r\n\r\n    // Payment methods properties\r\n    paymentMethods: any[] = [];\r\n    selectedPayments: any[] = [];\r\n    paymentSearchTerm: string = '';\r\n    paymentSearchLoading: boolean = false;\r\n    showPaymentDropdown: boolean = false;\r\n    searchedPaymentMethods: any[] = [];\r\n    paymentSearchTimeout: any;\r\n\r\n    // Finance options properties\r\n    financeOptions: any[] = [];\r\n    financeLoading: boolean = false;\r\n\r\n    constructor(\r\n        public cart: CartService,\r\n        private auth: AuthService,\r\n        private router: Router,\r\n        private http: HttpClient,\r\n        private toast: ToastService,\r\n        private pdfGenerator: PdfGeneratorComponent\r\n    ) {\r\n        this.cart.cart$.subscribe(i => this.items = i || []);\r\n\r\n        // Subscribe to user data for shop information\r\n        this.auth.user$.subscribe(u => this.user = u);\r\n\r\n        // No default customer or staff selected\r\n        this.selectedCustomer = null;\r\n        this.selectedStaff = null;\r\n\r\n        // Close dropdowns when clicking outside\r\n        document.addEventListener('click', (e) => {\r\n            if (!(e.target as Element)?.closest('.customer-search-container')) {\r\n                this.showCustomerDropdown = false;\r\n            }\r\n            if (!(e.target as Element)?.closest('.staff-search-container')) {\r\n                this.showStaffDropdown = false;\r\n            }\r\n            if (!(e.target as Element)?.closest('.payment-methods-container')) {\r\n                this.showPaymentDropdown = false;\r\n            }\r\n        });\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.loadStaff();\r\n        this.loadDefaultCustomers();\r\n        this.loadPaymentMethods();\r\n        this.loadFinanceOptions();\r\n    }\r\n\r\n    loadDefaultCustomers() {\r\n        // Load customers from API for immediate selection\r\n        const headers = this.auth.authHeaders();\r\n        const url = `${environment.apiBase}/pos/customer`;\r\n\r\n        this.http.get<any>(url, { headers }).subscribe({\r\n            next: (response) => {\r\n                // Handle the API response structure properly\r\n                let customers = [];\r\n                if (response.data) {\r\n                    customers = Array.isArray(response.data) ? response.data : [response.data];\r\n                } else {\r\n                    customers = Array.isArray(response) ? response : [];\r\n                }\r\n\r\n                // Show only real customers from API\r\n                this.searchedCustomers = customers.slice(0, 5); // Show first 5 customers\r\n            },\r\n            error: (error) => {\r\n                console.error('Failed to load default customers:', error);\r\n                // No fallback customers if API fails\r\n                this.searchedCustomers = [];\r\n            }\r\n        });\r\n    }\r\n\r\n    loadStaff() {\r\n        this.loading = true;\r\n        const url = `${environment.apiBase.replace(/\\/$/, '')}/staff`;\r\n        const headers = this.auth.authHeaders();\r\n\r\n        this.http.get<any>(url, { headers }).subscribe({\r\n            next: (response) => {\r\n                this.staffList = response?.data ?? response ?? [];\r\n                // Show first 5 staff members for initial display\r\n                this.searchedStaff = this.staffList.slice(0, 5);\r\n                this.loading = false;\r\n            },\r\n            error: (error) => {\r\n                console.error('Failed to load staff:', error);\r\n                // Fallback to static data if API fails\r\n                this.staffList = [\r\n                    { id: 1, name: 'Default Staff', email: 'staff@example.com' }\r\n                ];\r\n                this.searchedStaff = this.staffList.slice(0, 5);\r\n                this.loading = false;\r\n            }\r\n        });\r\n    }\r\n\r\n    back() { this.router.navigate(['/pos']); }\r\n\r\n    clearCart() { this.cart.clear(); }\r\n\r\n    // Customer search methods\r\n    onCustomerSearch() {\r\n        // Clear previous timeout\r\n        if (this.searchTimeout) {\r\n            clearTimeout(this.searchTimeout);\r\n        }\r\n\r\n        // Debounce search for 300ms\r\n        this.searchTimeout = setTimeout(() => {\r\n            if (this.customerSearchTerm.trim()) {\r\n                this.searchCustomers();\r\n            } else {\r\n                this.loadDefaultCustomers();\r\n            }\r\n        }, 300);\r\n    }\r\n\r\n    searchCustomers() {\r\n        const searchTerm = this.customerSearchTerm.trim();\r\n        if (!searchTerm) return;\r\n\r\n        this.customerSearchLoading = true;\r\n        const headers = this.auth.authHeaders();\r\n\r\n        // Use the correct API endpoint\r\n        const url = `${environment.apiBase}/pos/customer`;\r\n\r\n        this.http.get<any>(url, { headers }).subscribe({\r\n            next: (response) => {\r\n                // Handle the API response structure properly\r\n                let customers = [];\r\n                if (response.data) {\r\n                    customers = Array.isArray(response.data) ? response.data : [response.data];\r\n                } else {\r\n                    customers = Array.isArray(response) ? response : [];\r\n                }\r\n\r\n                // Filter customers by search term (name or phone)\r\n                this.searchedCustomers = customers.filter((customer: any) => {\r\n                    const searchLower = searchTerm.toLowerCase();\r\n                    return customer.name?.toLowerCase().includes(searchLower) ||\r\n                        customer.phone?.includes(searchTerm);\r\n                });\r\n\r\n                this.customerSearchLoading = false;\r\n            },\r\n            error: (error) => {\r\n                console.error('Failed to search customers:', error);\r\n                this.searchedCustomers = [];\r\n                this.customerSearchLoading = false;\r\n            }\r\n        });\r\n    }\r\n\r\n    selectCustomer(customer: any) {\r\n        this.selectedCustomer = customer;\r\n        this.customerSearchTerm = '';\r\n        this.showCustomerDropdown = false;\r\n    }\r\n\r\n    clearSelectedCustomer() {\r\n        this.selectedCustomer = null;\r\n        this.customerSearchTerm = '';\r\n    }\r\n\r\n    clearCustomerSearch() {\r\n        this.customerSearchTerm = '';\r\n        this.loadDefaultCustomers();\r\n    }\r\n\r\n    // Staff search methods\r\n    onStaffSearch() {\r\n        // Clear previous timeout\r\n        if (this.staffSearchTimeout) {\r\n            clearTimeout(this.staffSearchTimeout);\r\n        }\r\n\r\n        // Debounce search for 300ms\r\n        this.staffSearchTimeout = setTimeout(() => {\r\n            if (this.staffSearchTerm.trim()) {\r\n                this.searchStaff();\r\n            } else {\r\n                this.searchedStaff = this.staffList.slice(0, 5);\r\n            }\r\n        }, 300);\r\n    }\r\n\r\n    searchStaff() {\r\n        const searchTerm = this.staffSearchTerm.trim();\r\n        if (!searchTerm) return;\r\n\r\n        this.staffSearchLoading = true;\r\n\r\n        // Filter staff by search term (name or email)\r\n        this.searchedStaff = this.staffList.filter((staff: any) => {\r\n            const searchLower = searchTerm.toLowerCase();\r\n            return staff.name?.toLowerCase().includes(searchLower) ||\r\n                staff.full_name?.toLowerCase().includes(searchLower) ||\r\n                staff.email?.toLowerCase().includes(searchLower);\r\n        });\r\n\r\n        this.staffSearchLoading = false;\r\n    }\r\n\r\n    selectStaff(staff: any) {\r\n        this.selectedStaff = staff;\r\n        this.staffSearchTerm = '';\r\n        this.showStaffDropdown = false;\r\n    }\r\n\r\n    clearSelectedStaff() {\r\n        this.selectedStaff = null;\r\n        this.staffSearchTerm = '';\r\n    }\r\n\r\n    clearStaffSearch() {\r\n        this.staffSearchTerm = '';\r\n        this.searchedStaff = this.staffList.slice(0, 5);\r\n    }\r\n\r\n    // Payment methods methods\r\n    loadPaymentMethods() {\r\n        this.paymentSearchLoading = true;\r\n        const headers = this.auth.authHeaders();\r\n        const url = `${environment.apiBase}/payment_list`;\r\n\r\n        this.http.get<any>(url, { headers }).subscribe({\r\n            next: (response) => {\r\n                // Handle the API response structure properly\r\n                let methods = [];\r\n                if (response.data) {\r\n                    methods = Array.isArray(response.data) ? response.data : [response.data];\r\n                } else {\r\n                    methods = Array.isArray(response) ? response : [];\r\n                }\r\n\r\n                this.paymentMethods = methods;\r\n                // Show first 5 payment methods for initial display\r\n                this.searchedPaymentMethods = this.paymentMethods.slice(0, 5);\r\n                this.paymentSearchLoading = false;\r\n            },\r\n            error: (error) => {\r\n                console.error('Failed to load payment methods:', error);\r\n                // Fallback to static data if API fails\r\n                this.paymentMethods = [\r\n                    { id: 1, name: 'Cash', description: 'Cash payment' },\r\n                    { id: 2, name: 'Finance', description: 'Card/Finance payment' },\r\n                    { id: 3, name: 'Card', description: 'Credit/Debit card payment' },\r\n                    { id: 4, name: 'Cheque', description: 'Cheque payment' }\r\n                ];\r\n                this.searchedPaymentMethods = this.paymentMethods.slice(0, 5);\r\n                this.paymentSearchLoading = false;\r\n            }\r\n        });\r\n    }\r\n\r\n    loadFinanceOptions() {\r\n        this.financeLoading = true;\r\n        const headers = this.auth.authHeaders();\r\n        const url = `${environment.apiBase}/finance`;\r\n\r\n        this.http.get<any>(url, { headers }).subscribe({\r\n            next: (response) => {\r\n                // Handle the API response structure properly\r\n                let options = [];\r\n                if (response.data) {\r\n                    options = Array.isArray(response.data) ? response.data : [response.data];\r\n                } else {\r\n                    options = Array.isArray(response) ? response : [];\r\n                }\r\n\r\n                this.financeOptions = options;\r\n                this.financeLoading = false;\r\n            },\r\n            error: (error) => {\r\n                console.error('Failed to load finance options:', error);\r\n                // Fallback to static data if API fails\r\n                this.financeOptions = [\r\n                    { id: 1, name: 'Bank Transfer', description: 'Bank transfer finance' },\r\n                    { id: 2, name: 'Credit Line', description: 'Credit line finance' },\r\n                    { id: 3, name: 'Installment', description: 'Installment finance' }\r\n                ];\r\n                this.financeLoading = false;\r\n            }\r\n        });\r\n    }\r\n\r\n    onPaymentSearch() {\r\n        // Clear previous timeout\r\n        if (this.paymentSearchTimeout) {\r\n            clearTimeout(this.paymentSearchTimeout);\r\n        }\r\n\r\n        // Debounce search for 300ms\r\n        this.paymentSearchTimeout = setTimeout(() => {\r\n            if (this.paymentSearchTerm.trim()) {\r\n                this.searchPaymentMethods();\r\n            } else {\r\n                this.searchedPaymentMethods = this.paymentMethods.slice(0, 5);\r\n            }\r\n        }, 300);\r\n    }\r\n\r\n    searchPaymentMethods() {\r\n        const searchTerm = this.paymentSearchTerm.trim();\r\n        if (!searchTerm) return;\r\n\r\n        this.paymentSearchLoading = true;\r\n\r\n        // Filter payment methods by search term (name or description)\r\n        this.searchedPaymentMethods = this.paymentMethods.filter((method: any) => {\r\n            const searchLower = searchTerm.toLowerCase();\r\n            return method.name?.toLowerCase().includes(searchLower) ||\r\n                method.description?.toLowerCase().includes(searchLower);\r\n        });\r\n\r\n        this.paymentSearchLoading = false;\r\n    }\r\n\r\n    addPaymentMethod(method: any) {\r\n        // Check if method already exists\r\n        const exists = this.selectedPayments.find(p => p.method.id === method.id);\r\n        if (exists) {\r\n            this.toast.show('Payment method already added', 'error');\r\n            return;\r\n        }\r\n\r\n        // Add new payment method\r\n        const newPayment = {\r\n            method: method,\r\n            amount: null,\r\n            cardNo: '',\r\n            cardName: '',\r\n            chequeNo: '',\r\n            financeRefNo: '',\r\n            selectedFinance: null,\r\n            useRemainingAmount: false\r\n        };\r\n\r\n        this.selectedPayments.push(newPayment);\r\n        this.paymentSearchTerm = '';\r\n        this.showPaymentDropdown = false;\r\n    }\r\n\r\n    removePaymentMethod(index: number) {\r\n        this.selectedPayments.splice(index, 1);\r\n    }\r\n\r\n    updatePaymentAmount(index: number) {\r\n        // Ensure amount is valid\r\n        if (this.selectedPayments[index].amount == null || this.selectedPayments[index].amount < 0) {\r\n            this.selectedPayments[index].amount = 0;\r\n        }\r\n\r\n        // Check if total paid amount exceeds bill amount\r\n        const totalBill = this.cart.totalPrice();\r\n        const totalPaid = this.getTotalPaidAmount();\r\n\r\n        if (totalPaid > totalBill) {\r\n            this.toast.show('you enter exceed amount', 'error');\r\n            // Reset the current payment amount to prevent exceeding\r\n            const excessAmount = totalPaid - totalBill;\r\n            this.selectedPayments[index].amount = Math.max(0, (this.selectedPayments[index].amount || 0) - excessAmount);\r\n        }\r\n    }\r\n\r\n    clearPaymentSearch() {\r\n        this.paymentSearchTerm = '';\r\n        this.searchedPaymentMethods = this.paymentMethods.slice(0, 5);\r\n    }\r\n\r\n    getRemainingAmount(): number {\r\n        const totalBill = this.cart.totalPrice();\r\n        const paidAmount = this.selectedPayments.reduce((sum, payment) => sum + (Number(payment.amount) || 0), 0);\r\n        return Math.max(0, totalBill - paidAmount);\r\n    }\r\n\r\n    getTotalPaidAmount(): number {\r\n        return this.selectedPayments.reduce((sum, payment) => sum + (Number(payment.amount) || 0), 0);\r\n    }\r\n\r\n    toggleRemainingAmount(index: number) {\r\n        const payment = this.selectedPayments[index];\r\n\r\n        if (payment.useRemainingAmount) {\r\n            // Calculate remaining amount before this payment\r\n            const remainingAmount = this.getRemainingAmount() + (Number(payment.amount) || 0);\r\n\r\n            if (remainingAmount <= 0) {\r\n                // Remove payment method if remaining amount is 0 or less\r\n                this.removePaymentMethod(index);\r\n                this.toast.show('Payment method removed - no remaining amount', 'info');\r\n                return;\r\n            }\r\n\r\n            payment.amount = remainingAmount;\r\n            this.updatePaymentAmount(index);\r\n        } else {\r\n            // Clear the amount when unchecked\r\n            payment.amount = null;\r\n        }\r\n    }\r\n\r\n    generatePdf() {\r\n        console.log('Generate PDF clicked. Selected customer:', this.selectedCustomer);\r\n        // Validate that both customer and staff are selected\r\n        if (!this.selectedCustomer) {\r\n            console.log('No customer selected, showing toast');\r\n            this.toast.show('u didnot select customer', 'error');\r\n            return;\r\n        }\r\n\r\n        if (!this.selectedStaff) {\r\n            console.log('No staff selected, showing toast');\r\n            this.toast.show('u didnot select staff', 'error');\r\n            return;\r\n        }\r\n\r\n        // Validate payment methods\r\n        if (!this.selectedPayments || this.selectedPayments.length === 0) {\r\n            this.toast.show('u didnot select payment method', 'error');\r\n            return;\r\n        }\r\n\r\n        // Validate payment amounts\r\n        const totalBill = this.cart.totalPrice();\r\n        const totalPaid = this.getTotalPaidAmount();\r\n\r\n        if (totalPaid < totalBill) {\r\n            this.toast.show(`Payment incomplete. Remaining amount: ${(totalBill - totalPaid).toFixed(2)}`, 'error');\r\n            return;\r\n        }\r\n\r\n        // Validate payment method specific fields\r\n        for (let payment of this.selectedPayments) {\r\n            if (!payment.amount || payment.amount <= 0) {\r\n                this.toast.show(`Please enter valid amount for ${payment.method.name}`, 'error');\r\n                return;\r\n            }\r\n\r\n            // Validate payment method specific fields\r\n            const methodName = payment.method.name.toLowerCase();\r\n\r\n            if (methodName === 'finance') {\r\n                if (!payment.financeRefNo || !payment.selectedFinance) {\r\n                    this.toast.show('Please enter finance reference number and select finance option', 'error');\r\n                    return;\r\n                }\r\n            }\r\n\r\n            if (methodName === 'card') {\r\n                if (!payment.cardNo || !payment.cardName) {\r\n                    this.toast.show('Please enter card number and card name for card payment', 'error');\r\n                    return;\r\n                }\r\n            }\r\n\r\n            if (methodName === 'cheque') {\r\n                if (!payment.chequeNo) {\r\n                    this.toast.show('Please enter cheque number for cheque payment', 'error');\r\n                    return;\r\n                }\r\n            }\r\n        }\r\n\r\n        // Validate that cart has items\r\n        if (!this.items || this.items.length === 0) {\r\n            this.toast.show('Cannot generate PDF for empty cart', 'error');\r\n            return;\r\n        }\r\n\r\n        // Prepare invoice data\r\n        const invoiceData: InvoiceData = {\r\n            customer: this.selectedCustomer,\r\n            staff: this.selectedStaff,\r\n            items: this.items,\r\n            payments: this.selectedPayments,\r\n            total: totalBill\r\n        };\r\n\r\n        // Generate PDF using the PDF generator service\r\n        this.pdfGenerator.generateInvoicePdf(invoiceData);\r\n    }\r\n}\r\n", "<div class=\"checkout-container\">\r\n    <h2>Checkout</h2>\r\n    <section class=\"selectors\">\r\n        <div class=\"selector-group\">\r\n            <label class=\"selector-label\">Assign Staff</label>\r\n            <div class=\"staff-search-container\">\r\n                <div class=\"search-input-wrapper\">\r\n                    <input type=\"text\" placeholder=\"Search staff by name or email...\" [(ngModel)]=\"staffSearchTerm\"\r\n                        (input)=\"onStaffSearch()\" (focus)=\"showStaffDropdown = true\" class=\"staff-search-input\">\r\n                    <i class=\"fas fa-search search-icon\"></i>\r\n                    <button *ngIf=\"staffSearchTerm\" class=\"clear-search\" (click)=\"clearStaffSearch()\">\r\n                        <i class=\"fas fa-times\"></i>\r\n                    </button>\r\n                </div>\r\n\r\n                <!-- Staff Dropdown -->\r\n                <div *ngIf=\"showStaffDropdown && (searchedStaff?.length || staffSearchLoading)\" class=\"staff-dropdown\">\r\n                    <div *ngIf=\"staffSearchLoading\" class=\"dropdown-loading\">\r\n                        <i class=\"fas fa-spinner fa-spin\"></i> Searching staff...\r\n                    </div>\r\n                    <div *ngFor=\"let staff of searchedStaff\" class=\"staff-option\" (click)=\"selectStaff(staff)\">\r\n                        <div class=\"staff-name\">{{ staff.name || staff.full_name }}</div>\r\n                        <div class=\"staff-email\" *ngIf=\"staff.email\">{{ staff.email }}</div>\r\n                    </div>\r\n                    <div *ngIf=\"!staffSearchLoading && searchedStaff?.length === 0 && staffSearchTerm\" class=\"no-staff\">\r\n                        No staff found\r\n                    </div>\r\n                </div>\r\n\r\n                <!-- Selected Staff Display -->\r\n                <div *ngIf=\"selectedStaff\" class=\"selected-staff\">\r\n                    <div class=\"staff-info\">\r\n                        <span class=\"staff-name\">{{ selectedStaff.name || selectedStaff.full_name }}</span>\r\n                        <span class=\"staff-email\" *ngIf=\"selectedStaff.email\">• {{ selectedStaff.email }}</span>\r\n                    </div>\r\n                    <button class=\"remove-staff\" (click)=\"clearSelectedStaff()\">\r\n                        <i class=\"fas fa-times\"></i>\r\n                    </button>\r\n                </div>\r\n\r\n                <!-- No Staff Selected Message -->\r\n                <div *ngIf=\"!selectedStaff && !showStaffDropdown\" class=\"no-staff-selected\">\r\n                    <i class=\"fas fa-info-circle\"></i>\r\n                    <span>No staff selected. Search and select a staff member above.</span>\r\n                </div>\r\n            </div>\r\n        </div>\r\n\r\n        <div class=\"selector-group\">\r\n            <label class=\"selector-label\">Choose Customer</label>\r\n            <div class=\"customer-search-container\">\r\n                <div class=\"search-input-wrapper\">\r\n                    <input type=\"text\" placeholder=\"Search by mobile number or name...\" [(ngModel)]=\"customerSearchTerm\"\r\n                        (input)=\"onCustomerSearch()\" (focus)=\"showCustomerDropdown = true\"\r\n                        class=\"customer-search-input\">\r\n                    <i class=\"fas fa-search search-icon\"></i>\r\n                    <button *ngIf=\"customerSearchTerm\" class=\"clear-search\" (click)=\"clearCustomerSearch()\">\r\n                        <i class=\"fas fa-times\"></i>\r\n                    </button>\r\n                </div>\r\n\r\n                <!-- Customer Dropdown -->\r\n                <div *ngIf=\"showCustomerDropdown && (searchedCustomers?.length || customerSearchLoading)\"\r\n                    class=\"customer-dropdown\">\r\n                    <div *ngIf=\"customerSearchLoading\" class=\"dropdown-loading\">\r\n                        <i class=\"fas fa-spinner fa-spin\"></i> Searching customers...\r\n                    </div>\r\n                    <div *ngFor=\"let customer of searchedCustomers\" class=\"customer-option\"\r\n                        (click)=\"selectCustomer(customer)\">\r\n                        <div class=\"customer-name\">{{ customer.name }}</div>\r\n                        <div class=\"customer-phone\" *ngIf=\"customer.phone\">{{ customer.phone }}</div>\r\n                    </div>\r\n                    <div *ngIf=\"!customerSearchLoading && searchedCustomers?.length === 0 && customerSearchTerm\"\r\n                        class=\"no-customers\">\r\n                        No customers found\r\n                    </div>\r\n                </div>\r\n\r\n                <!-- Selected Customer Display -->\r\n                <div *ngIf=\"selectedCustomer\" class=\"selected-customer\">\r\n                    <div class=\"customer-info\">\r\n                        <span class=\"customer-name\">{{ selectedCustomer.name }}</span>\r\n                        <span class=\"customer-phone\" *ngIf=\"selectedCustomer.phone\">• {{ selectedCustomer.phone\r\n                            }}</span>\r\n                    </div>\r\n                    <button class=\"remove-customer\" (click)=\"clearSelectedCustomer()\">\r\n                        <i class=\"fas fa-times\"></i>\r\n                    </button>\r\n                </div>\r\n\r\n                <!-- No Customer Selected Message -->\r\n                <div *ngIf=\"!selectedCustomer && !showCustomerDropdown\" class=\"no-customer-selected\">\r\n                    <i class=\"fas fa-info-circle\"></i>\r\n                    <span>No customer selected. Search and select a customer above.</span>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </section>\r\n\r\n    <!-- Payment Methods Section -->\r\n    <section class=\"payment-section\">\r\n        <h3>Payment Methods</h3>\r\n        <div class=\"payment-summary\">\r\n            <div class=\"total-amount\">\r\n                <span>Total Bill Amount: {{ cart.totalPrice() | number:'1.2-2' }}</span>\r\n            </div>\r\n            <div class=\"remaining-amount\" *ngIf=\"getRemainingAmount() > 0\">\r\n                <span>Remaining Amount: {{ getRemainingAmount() | number:'1.2-2' }}</span>\r\n            </div>\r\n        </div>\r\n\r\n        <!-- Payment Methods List -->\r\n        <div class=\"payment-methods-container\">\r\n            <div class=\"payment-method-search\">\r\n                <div class=\"search-input-wrapper\">\r\n                    <input type=\"text\" placeholder=\"Search payment methods...\" [(ngModel)]=\"paymentSearchTerm\"\r\n                        (input)=\"onPaymentSearch()\" (focus)=\"showPaymentDropdown = true\" class=\"payment-search-input\">\r\n                    <i class=\"fas fa-search search-icon\"></i>\r\n                    <button *ngIf=\"paymentSearchTerm\" class=\"clear-search\" (click)=\"clearPaymentSearch()\">\r\n                        <i class=\"fas fa-times\"></i>\r\n                    </button>\r\n                </div>\r\n\r\n                <!-- Payment Methods Dropdown -->\r\n                <div *ngIf=\"showPaymentDropdown && (searchedPaymentMethods?.length || paymentSearchLoading)\"\r\n                    class=\"payment-dropdown\">\r\n                    <div *ngIf=\"paymentSearchLoading\" class=\"dropdown-loading\">\r\n                        <i class=\"fas fa-spinner fa-spin\"></i> Loading payment methods...\r\n                    </div>\r\n                    <div *ngFor=\"let method of searchedPaymentMethods\" class=\"payment-option\"\r\n                        (click)=\"addPaymentMethod(method)\">\r\n                        <div class=\"payment-name\">{{ method.name }}</div>\r\n                        <div class=\"payment-description\" *ngIf=\"method.description\">{{ method.description }}</div>\r\n                    </div>\r\n                    <div *ngIf=\"!paymentSearchLoading && searchedPaymentMethods?.length === 0 && paymentSearchTerm\"\r\n                        class=\"no-payments\">\r\n                        No payment methods found\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n            <!-- Selected Payment Methods -->\r\n            <div class=\"selected-payments\" *ngIf=\"selectedPayments?.length\">\r\n                <h4>Selected Payment Methods</h4>\r\n                <div class=\"payment-item\" *ngFor=\"let payment of selectedPayments; let i = index\">\r\n                    <div class=\"payment-details\">\r\n                        <div class=\"payment-method-name\">{{ payment.method.name }}</div>\r\n\r\n                        <!-- Cash Payment -->\r\n                        <div *ngIf=\"payment.method.name.toLowerCase() === 'cash'\" class=\"payment-inputs\">\r\n                            <label>Amount:</label>\r\n                            <input type=\"number\" [(ngModel)]=\"payment.amount\" (input)=\"updatePaymentAmount(i)\"\r\n                                placeholder=\"Enter cash amount\" class=\"amount-input\">\r\n                            <div class=\"remaining-amount-checkbox\">\r\n                                <input type=\"checkbox\" [(ngModel)]=\"payment.useRemainingAmount\"\r\n                                    (change)=\"toggleRemainingAmount(i)\" id=\"remaining-cash-{{i}}\"\r\n                                    class=\"checkbox-input\">\r\n                                <label for=\"remaining-cash-{{i}}\" class=\"checkbox-label\">Remaining Amount</label>\r\n                            </div>\r\n                        </div>\r\n\r\n                        <!-- Finance Payment -->\r\n                        <div *ngIf=\"payment.method.name.toLowerCase() === 'finance'\" class=\"payment-inputs\">\r\n                            <div class=\"input-group\">\r\n                                <label>Amount:</label>\r\n                                <input type=\"number\" [(ngModel)]=\"payment.amount\" (input)=\"updatePaymentAmount(i)\"\r\n                                    placeholder=\"Enter finance amount\" class=\"amount-input\">\r\n                                <div class=\"remaining-amount-checkbox\">\r\n                                    <input type=\"checkbox\" [(ngModel)]=\"payment.useRemainingAmount\"\r\n                                        (change)=\"toggleRemainingAmount(i)\" id=\"remaining-finance-{{i}}\"\r\n                                        class=\"checkbox-input\">\r\n                                    <label for=\"remaining-finance-{{i}}\" class=\"checkbox-label\">Remaining Amount</label>\r\n                                </div>\r\n                            </div>\r\n                            <div class=\"input-group\">\r\n                                <label>Finance Reference Number:</label>\r\n                                <input type=\"text\" [(ngModel)]=\"payment.financeRefNo\"\r\n                                    placeholder=\"Enter finance reference number\" class=\"card-input\">\r\n                            </div>\r\n                            <div class=\"input-group\">\r\n                                <label>Finance:</label>\r\n                                <select [(ngModel)]=\"payment.selectedFinance\" class=\"finance-select\">\r\n                                    <option value=\"\">Select Finance Option</option>\r\n                                    <option *ngFor=\"let finance of financeOptions\" [ngValue]=\"finance\">\r\n                                        {{ finance.name }}\r\n                                    </option>\r\n                                </select>\r\n                            </div>\r\n                        </div>\r\n\r\n                        <!-- Card Payment -->\r\n                        <div *ngIf=\"payment.method.name.toLowerCase() === 'card'\" class=\"payment-inputs\">\r\n                            <div class=\"input-group\">\r\n                                <label>Amount:</label>\r\n                                <input type=\"number\" [(ngModel)]=\"payment.amount\" (input)=\"updatePaymentAmount(i)\"\r\n                                    placeholder=\"Enter card amount\" class=\"amount-input\">\r\n                                <div class=\"remaining-amount-checkbox\">\r\n                                    <input type=\"checkbox\" [(ngModel)]=\"payment.useRemainingAmount\"\r\n                                        (change)=\"toggleRemainingAmount(i)\" id=\"remaining-card-{{i}}\"\r\n                                        class=\"checkbox-input\">\r\n                                    <label for=\"remaining-card-{{i}}\" class=\"checkbox-label\">Remaining Amount</label>\r\n                                </div>\r\n                            </div>\r\n                            <div class=\"input-group\">\r\n                                <label>Card Number:</label>\r\n                                <input type=\"text\" [(ngModel)]=\"payment.cardNo\" placeholder=\"Enter card number\"\r\n                                    class=\"card-input\">\r\n                            </div>\r\n                            <div class=\"input-group\">\r\n                                <label>Card Name:</label>\r\n                                <input type=\"text\" [(ngModel)]=\"payment.cardName\" placeholder=\"Enter card holder name\"\r\n                                    class=\"card-input\">\r\n                            </div>\r\n                        </div>\r\n\r\n                        <!-- Cheque Payment -->\r\n                        <div *ngIf=\"payment.method.name.toLowerCase() === 'cheque'\" class=\"payment-inputs\">\r\n                            <div class=\"input-group\">\r\n                                <label>Amount:</label>\r\n                                <input type=\"number\" [(ngModel)]=\"payment.amount\" (input)=\"updatePaymentAmount(i)\"\r\n                                    placeholder=\"Enter cheque amount\" class=\"amount-input\">\r\n                                <div class=\"remaining-amount-checkbox\">\r\n                                    <input type=\"checkbox\" [(ngModel)]=\"payment.useRemainingAmount\"\r\n                                        (change)=\"toggleRemainingAmount(i)\" id=\"remaining-cheque-{{i}}\"\r\n                                        class=\"checkbox-input\">\r\n                                    <label for=\"remaining-cheque-{{i}}\" class=\"checkbox-label\">Remaining Amount</label>\r\n                                </div>\r\n                            </div>\r\n                            <div class=\"input-group\">\r\n                                <label>Cheque Number:</label>\r\n                                <input type=\"text\" [(ngModel)]=\"payment.chequeNo\" placeholder=\"Enter cheque number\"\r\n                                    class=\"card-input\">\r\n                            </div>\r\n                        </div>\r\n\r\n                        <!-- Other Payment Methods -->\r\n                        <div *ngIf=\"payment.method.name.toLowerCase() !== 'cash' && \r\n                                   payment.method.name.toLowerCase() !== 'finance' && \r\n                                   payment.method.name.toLowerCase() !== 'card' && \r\n                                   payment.method.name.toLowerCase() !== 'cheque'\" class=\"payment-inputs\">\r\n                            <label>Amount:</label>\r\n                            <input type=\"number\" [(ngModel)]=\"payment.amount\" (input)=\"updatePaymentAmount(i)\"\r\n                                placeholder=\"Enter amount\" class=\"amount-input\">\r\n                            <div class=\"remaining-amount-checkbox\">\r\n                                <input type=\"checkbox\" [(ngModel)]=\"payment.useRemainingAmount\"\r\n                                    (change)=\"toggleRemainingAmount(i)\" id=\"remaining-other-{{i}}\"\r\n                                    class=\"checkbox-input\">\r\n                                <label for=\"remaining-other-{{i}}\" class=\"checkbox-label\">Remaining Amount</label>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n\r\n                    <button class=\"remove-payment\" (click)=\"removePaymentMethod(i)\">\r\n                        <i class=\"fas fa-times\"></i>\r\n                    </button>\r\n                </div>\r\n            </div>\r\n\r\n            <!-- No Payment Methods Selected -->\r\n            <div *ngIf=\"!selectedPayments?.length\" class=\"no-payments-selected\">\r\n                <i class=\"fas fa-credit-card\"></i>\r\n                <span>No payment methods selected. Choose payment methods above.</span>\r\n            </div>\r\n        </div>\r\n    </section>\r\n\r\n    <section class=\"order-items\">\r\n        <table>\r\n            <thead>\r\n                <tr>\r\n                    <th>Product</th>\r\n                    <th>Qty</th>\r\n                    <th>Price</th>\r\n                    <th>Total</th>\r\n                </tr>\r\n            </thead>\r\n            <tbody>\r\n                <tr *ngFor=\"let it of items\">\r\n                    <td>{{ it.product?.name || it.product?.title || it.id }}</td>\r\n                    <td>{{ it.qty }}</td>\r\n                    <td>{{ (it.product?.price || 0) | number:'1.2-2' }}</td>\r\n                    <td>{{ ((it.product?.price || 0) * it.qty) | number:'1.2-2' }}</td>\r\n                </tr>\r\n            </tbody>\r\n            <tfoot>\r\n                <tr>\r\n                    <td colspan=\"3\" class=\"right\">Total</td>\r\n                    <td>{{ cart.totalPrice() | number:'1.2-2' }}</td>\r\n                </tr>\r\n            </tfoot>\r\n        </table>\r\n    </section>\r\n\r\n\r\n\r\n    <section class=\"actions\">\r\n        <button (click)=\"clearCart()\">Clear Cart</button>\r\n        <button (click)=\"generatePdf()\">Generate PDF</button>\r\n        <button (click)=\"back()\">Back to POS</button>\r\n    </section>\r\n</div>"],
  "mappings": "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",
  "names": []
}
